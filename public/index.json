


[{"content":"","date":"2024-06-11","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"2024-06-11","externalUrl":null,"permalink":"/","section":"Witchcraft's space","summary":"","title":"Witchcraft's space","type":"page"},{"content":"","date":"2024-06-11","externalUrl":null,"permalink":"/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/","section":"Tags","summary":"","title":"机器学习","type":"tags"},{"content":"","date":"2024-06-11","externalUrl":null,"permalink":"/tags/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/","section":"Tags","summary":"","title":"图神经网络","type":"tags"},{"content":" GAT(Graph Attention Networks) # 论文：https://arxiv.org/pdf/1710.10903\n图注意网络（Graph Attention Networks，GAT）是一种用于图结构数据的神经网络模型，通过引入注意力机制，能够有效地捕捉节点间的关系。GAT由Petar Veličković等人在2017年提出，是在图卷积网络（Graph Convolutional Networks，GCN）的基础上发展而来的。\n","date":"2024-06-11","externalUrl":null,"permalink":"/posts/gnn_pt2/","section":"文章","summary":"","title":"图神经网络学习笔记（2）","type":"posts"},{"content":" 所有作者发表过的文章 本部分记录了作者发布过的所有学习笔记，包括但不限于环境配置、论文解读、机器学习🤗\n","date":"2024-06-11","externalUrl":null,"permalink":"/posts/","section":"文章","summary":"","title":"文章","type":"posts"},{"content":"","date":"2024-06-11","externalUrl":null,"permalink":"/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","section":"Tags","summary":"","title":"学习笔记","type":"tags"},{"content":"","date":"2024-05-27","externalUrl":null,"permalink":"/funs/","section":"Funs","summary":"","title":"Funs","type":"funs"},{"content":" 最近玩《璀璨宝石》有点上头，网上找到了一篇分析牌型的文章，转载于此便于学习\n一．色环 # 璀璨宝石中的颜色存在相互关联性，五色色环如下：\n——黑——红——绿——蓝——白——黑——红——绿——蓝——\n为了后面叙述方便，顺时针下一个颜色称为顺临色，顺时针下两个颜色称为顺对色，逆时针下一个颜色称为逆临色，逆时针下两个颜色称为逆对色。以白色为例，黑色是白色的顺临色，红色是白色的顺对色，蓝色是白色的逆临色，绿色是白色的逆对色。\n璀璨宝石设计的一大特点是卡牌上的宝石元素并不完全是镜像排列的，虽然五个颜色的卡牌数量一致，宝石和分数的模型一致，但是组合方式却并非完全一致，这赋予了各个颜色不同的“特性”。不同局势下，颜色之间关联的差异，使得玩家的策略更多变，增加了游戏的策略度和可玩性。\n二．三级卡（20张）： # 73： 3本色 7顺临（5）\n游戏中唯一的5分卡，行动数量-分数比一般为7:5=1.4，是性价比最高的一张得分牌。但受制于宝石上限10，一般在中后期才有机会完成，不建议早期预留，一旦操作不好，很容易中期被卡住。\n单7： 7顺临（4）\n单色7换4分，行动数量-分数比一般为7:4=1.75，虽然性价比低于73，不过胜在只需要7枚宝石就可以完成，是有机会在前期就打出来解放一个预留位置的，在翻出的3级牌普遍较差的情况下可以考虑前期预留。\n633： 6顺临 3本色 3顺对（4）\n后期性价比比较高的一张牌，行动数量-分数比一般为6:4=1.5，由于需要12枚宝石，一般后期才有机会打出，可以作为收尾牌.\n5333： 5顺对 3顺临 3逆对 3逆临（3）\n几乎任何流派都不会作为核心的一张牌，行动数量-分数比一般为7:3=2.3，基本属于三级牌里的垃圾牌，极少数情况下贵族流收尾补分会选择它。\n三级牌小结：三级牌整体五色排列非常整齐，没有体现出颜色之间的差异性。单看性价比三级牌都是非常高的，但受制于宝石数量和宝石上限，在没有低级牌支撑的情况下贸然冲三级牌是很容易卡住的，因此预留三级牌的时机和选择非常考验玩家对游戏节奏的把握。另外可以看到所有比较强的三级牌都对顺临色需求最大，那么在选定收尾三级牌颜色的同时，顺临色牌的价值也会随之变大。例如如果我想以三级绿牌收尾，那么本局前面我应尽量收集蓝宝石牌。\n三．二级卡（30张）： # 单6： 6本色（3）\n二级牌中的最高分牌，行动数量-分数比一般为6:3=2，在二级牌中算是相当优秀的性价比了。另外本牌是本色生本色，属于强化颜色体系构成，对争夺三级牌和贵族都有益处，这点也侧面提高了它的价值。但是本牌需要6同色，完成难度是二级牌中最大的，前期预留需谨慎。\n53： 绿：3本色 5顺临（2） 蓝：3本色 5顺临（2） 白：3顺临 5顺对（2） 黑：3顺临 5顺对（2） 红：3逆对 5逆临（2）\n8宝石换2分，行动数量-分数比一般为6:2=3，性价比平平。二级牌中就开始出现有颜色差异的牌了，53牌中，绿蓝两色延续了和三级牌73牌相同的主顺临，辅本色的构成，而白黑红三色则几乎构成了一个三色闭环。本牌优先级不高，通常不需要前期预留。\n单5： 绿：5本色（2） 蓝：5本色（2） 白：5顺对（2） 黑：5逆临（2） 红：5逆临（2）\n5单色是最具代表性的颜色差异牌，直接分出了绿蓝和白黑红两个颜色阵营，行动数量-分数比一般为5:2=2.5，由于绿蓝的单5是强化本色，因此价值略高于白黑红。这张牌很直观的比楼上53少用3个宝石，加上黄金的压力对比单6要轻不少，前期可以考虑预留。\n421： 4顺对 2顺临 1逆对（2）\n个人认为的前期最强牌，行动数量-分数比一般为4:2=2，在有不俗性价比的同时对黄金的需求很低，只需要1个甚至0个黄金就可以完成，这使得前期421开局不但不会被卡，后续也非常灵活，进可快攻抢大分，退可卡金凑贵族。因为421的需求颜色构成和三级牌不相符，所以中后期421价值反而有所下降，但仍然是一张可选牌。\n332： 3顺对 3逆临 2本色（1）\n8宝石换1分，行动数量-分数比一般为4:1=4，较低的性价和混乱颜色需求比使得大部分情况下无人问津。\n322： 绿：3顺临 2顺对 2逆对（1） 蓝：3逆对 2逆临 2本色（1） 白：3逆对 2顺临 2顺对（1） 黑：3逆临 2顺对 2逆对（1） 红：3逆临 2逆对 2本色（1）\n和332类似的地位，行动数量-分数比一般为4：1=4，优势是唯二不需要黄金就可以获得的分数牌，在某些卡金卡得丧心病狂的局里会有不错的表现。\n二级牌小结：二级牌作为既容易打出，分数性价比又高的牌，是游戏中争夺激烈的主要战场。其在游戏中需求量最大，轮换速度也最快，因此相对于另外两个等级，研究二级牌的颜色搭配是最重要也最常用的。在二级牌中的强牌里，可以明显看到绿蓝双色相对独立，而白黑红三色闭环相关联，自然而然的，绿蓝和白黑红就变成了冲分流里最常见的两组颜色搭配，它们不但互成体系，而且有更大的拿贵族机会。\n四．一级卡（40张）： # 单4： 4逆对（1）\n一级牌里唯一有分的牌，行动数量-分数比一般为：4:1=4，考虑到有资源剩余，它的性价比甚至高于二级牌的332和322。从跑分的角度看前期单4的性价比不太够看，但是潜力巨大，到中后期，它每靠牌节省1资源，它的性价比就会有巨大的提升，关键时刻补分有奇效。也可以考虑前期先做，但是如果选择前期做一定要充分发挥它卡金的优势，争取把别人卡住，否则正常发育的情况下以它的性价比来说是比较吃亏的。\n311： 绿：3顺临 1本色 1顺对 蓝：3逆临 1本色 1逆对 白：3本色 1顺临 1逆临 黑：3顺临 1本色 1顺对 红：3逆临 1本色 1逆对\n0分一级卡中最昂贵的一张牌，前期在同颜色的一级卡中一般都是最后一个考虑的。但是到后期由于311的颜色需求比较科学，符合绿蓝，白黑红两种主流的颜色搭配，在争贵族补色的时候经常会有用武之地。\n221： 2逆对 2逆临 1顺临\n同样属于昂贵的0分一级牌，颜色搭配也不尽如人意，一般前期没有更好的选择时才会选择用它补色。\n2111： 2逆对 1逆临 1顺临 1顺对\n都说卡牌游戏没有完爆，但璀璨宝石里的2111确实被1111完爆。不过对于1级牌，重点是关键时刻需要它们来补色，价格多一点少一点往往是次要的。\n22： 绿：2顺临 2逆临 蓝：2顺对 2逆临 白：2顺临 2逆临 黑：2顺对 2逆临 红：2本色 2逆对\n比较便宜的一级牌，其中红22的颜色需求比较贴白黑红流派。\n1111 1顺临 1顺对 1逆对 1逆临\n比较便宜的一级牌，补色优先级很高。\n单3： 绿：3逆临 蓝：3顺对 白：3逆临 黑：3顺对 红：3逆对\n单3虽然只需3个宝石，但是做成的难度反而比需要4个宝石的一级牌大，所以优先级比较低，其中红单3比较贴白黑红流派。\n21： 2顺对 1顺临\n最便宜的一级牌，如果能拿到自己需要的颜色就是血赚。\n一级牌小结：由于一级牌的价值主要是跟着翻出的三级牌和贵族走，因此很容易出现翻出的4张一级牌都没啥用从而卡住的局面。但是一级牌的更新速度慢也赋予了它物以稀为贵的特点，抢手颜色一级牌的价值不亚于，甚至高于一个黄金的价值。\n总结 # 从卡牌上五色需求的规律来看，绿蓝和白黑红无疑是最高效的两个组合。其中绿蓝流前中期蓝牌价值更高一点，因为便于后期做对蓝需求大的绿牌，如果有44绿蓝贵族，先做蓝再做绿是节奏最好的。白黑红的完美节奏是优先做黑，后期由黑出高分白，再用黑白补红色一二级牌，完成333白黑红贵族。\n","date":"2024-05-27","externalUrl":null,"permalink":"/funs/boardgame/splendor/","section":"Funs","summary":"","title":"璀璨宝石牌型分析","type":"funs"},{"content":"","date":"2024-05-27","externalUrl":null,"permalink":"/tags/%E6%A1%8C%E6%B8%B8/","section":"Tags","summary":"","title":"桌游","type":"tags"},{"content":"","date":"2024-05-07","externalUrl":null,"permalink":"/tags/mac/","section":"Tags","summary":"","title":"Mac","type":"tags"},{"content":" 1. Mac 键盘符号说明 # ⌘ == Command ⇧ == Shift ⇪ == Caps Lock ⌥ == Option ⌃ == Control ↩ == Return/Enter ⌫ == Delete ⌦ == 向前删除键（Fn+Delete） ↑ == 上箭头 ↓ == 下箭头 ← == 左箭头 → == 右箭头 ⇞ == Page Up（Fn+↑） ⇟ == Page Down（Fn+↓） Home == Fn + ← End == Fn + → ⇥ == 右制表符（Tab键） ⇤ == 左制表符（Shift+Tab） ⎋ == Escape (Esc) ⏏ == 电源开关键 2. 常用 # 描述 Mac 快捷键 显示命令面板 ⇧⌘P, F1 快速打开 ⌘P 新建 窗口/实例 ⌘N(之前的：⇧⌘N) 关闭 窗口/实例 ⌘W 侧边栏开关 command + B 控制台开关 command + J 合并当前行 control + J 整个项目搜索内容 command + shift + F 创建分屏快捷键 command + \\ 批量替换当前文件中所有匹配的文本 command + F2 复制光标向上或向下批量添加内容 option + command + 上下箭头 切换tab显示 option + command + 左右箭头 3. 基本编辑 # Mac 快捷键 介绍 ⌘X 剪切 ⌘C 复制 ⌥↓ / ⌥↑ 移动当前行向 下/上 ⇧⌥↓ / ⇧⌥↑ 复制当前行向 下/上 ⇧⌘K 删除当前行 ⌘Enter / ⇧⌘Enter 在下/上 插入一行 ⇧⌘\\ 跳转到匹配的括号 ⌘] / ⌘[ 向左/向右 缩进当前行 Home / End 跳到当前行的头部，尾部 ⌘↑ / ⌘↓ 跳到当前行的开始，结束 ⌃PgUp 滚动到 ⌃PgDown 滚动到行头/行尾 ⌘PgUp /⌘PgDown 滚动到页头/页尾 ⇧⌘[ / ⇧⌘] 折叠/展开区域 ⌘K ⌘[ / ⌘K ⌘] 折叠/展开所有子区域 ⌘K ⌘0 / ⌘K ⌘J 折叠/展开所有区域 ⌘K ⌘C 添加行注释 ⌘K ⌘U 删除行注释 ⌘/ 切换行注释 ⇧⌥A 切换块注释 ⌥Z 切换文字换行 4. 多光标和选择 # Mac 快捷键 介绍 Alt+Click 插入光标 ⌥⌘↑ 在上面插入光标 ⌥⌘↓ 在下面插入光标 ⌘U 撤消上一个光标操作 ⇧⌥I 在所选每行的末尾插入光标 ⌘I 选择当前行 ⇧⌘L 选择当前选择的所有事件 ⌘F2 选择当前单词的所有出现 ⌃⇧⌘→ 展开选择 ⌃⇧⌘← 收缩选择 Shift+Alt + drag mouse（拖动鼠标） 列（框）选择 ⇧⌥⌘↑ 向上列（框）选择 ⇧⌥⌘↓ 向下列（框）选择 ⇧⌥⌘← 向左列（框）选择 ⇧⌥⌘→ 向右列（框）选择 ⇧⌥⌘PgUp 列（框）选择 向上一页 ⇧⌥⌘PgDown 列（框）选择 向下一页 5. 搜索和替换 # Mac 快捷键 介绍 ⌘F 查找 ⌥⌘F 替换 ⌘G / ⇧⌘G 查找下一个/上一个 ⌥Enter 选择查找匹配的所有匹配项 ⌘D 将选择添加到下一个查找匹配 ⌘K ⌘D 将最后一个选择移至下一个查找匹配项 6. 丰富的语言编辑 # Mac 快捷键 介绍 ⌃Space 触发建议 ⇧⌘Space 触发参数提示 Tab Emmet扩展缩写 ⇧⌥F 格式化文档 ⌘K ⌘F 格式选择 F12 转到定义 ⌥F12 Peek定义 ⌘K F12 打开定义到一边 ⌘. 快速修复 ⇧F12 显示引用 F2 重命名符号 ⇧⌘. / ⇧⌘, 替换为下一个/上一个值 ⌘K ⌘X 修剪尾随空格 ⌘K M 更改文件语言 7. 导航 # Mac 快捷键 介绍 ⌘T 显示所有符号 ⌃G 转到行… ⌘P 转到文件… ⇧⌘O 转到符号… ⇧⌘M 显示问题“面板” F8 / ⇧F8 转到下一个/上一个错误或警告 ⌃⇧Tab 浏览编辑器组历史记录 ⌃- / ⌃⇧- 后退/前进 ⌃⇧M 切换选项卡移动焦点 8. 编辑器管理 # Mac 快捷键 介绍 ⌘W 关闭编辑窗口 ⌘K F 关闭文件 ⌘\\ 拆分编辑窗口 ⌘1 / ⌘2 / ⌘3 聚焦到第1，第2，第3编辑器组中 ⌘K ⌘← / ⌘K ⌘→ 聚焦到上一个/下一个编辑器组 ⌘K ⇧⌘← / ⌘K ⇧⌘→ 向左/向右移动编辑器 ⌘K ← / ⌘K → 移动活动编辑器组 9. 文件管理 # Mac 快捷键 介绍 ⌘N 新建文件 ⌘O 打开文件 ⌘S 保存 ⇧⌘S 保存为… ⌥⌘S 保存所有 ⌘W 关闭 ⌘K ⌘W 关闭所有 ⇧⌘T 重新打开已关闭的编辑器 ⌘K 输入保持打开 ⌃Tab / ⌃⇧ 选项卡打开下一个/上一个 ⌘K P 复制活动文件的路径 ⌘K R 在资源管理器中显示活动文件 ⌘K O 在新窗口/实例中显示活动文件 10. 显示 # Mac 快捷键 介绍 ⌃⌘F 切换全屏 ⌥⌘1 切换编辑器布局 ⌘= / ⇧⌘- 放大/缩小 ⌘B 切换侧栏可见性 ⇧⌘E 显示资源管理器/切换焦点 ⇧⌘F 显示搜索 ⌃⇧G 显示Git ⇧⌘D 显示Debug ⇧⌘X 显示扩展名 ⇧⌘H 在文件中替换 ⇧⌘J 切换搜索详细信息 ⇧⌘C 打开新命令提示符/终端 ⇧⌘U 显示输出面板 ⇧⌘V 切换Markdown预览 ⌘K V 打开Markdown预览到一边 11. 调试 # Mac 快捷键 介绍 F9 切换断点 F5 开始/继续 F11 / ⇧F11 跳进/出 F10 跳过 ⇧F5 暂停 ⌘K ⌘I 显示悬停 12. 集成终端 # Mac 快捷键 介绍 ⌃` 显示集成终端 ⌃⇧` 创建新终端 unassigned（末分配） 复制选择 unassigned（末分配） 粘贴到活动终端 ⌘↑ 向上滑动 ⌘↓ 下身滑动 PgUp 向上滚动页面 PgDown 向下滚动页面 ⌘Home 滚动到顶部 ⌘End 滚动到尾部 参考资料 # VScode官网 快捷键 Mac 版\nVisual Studio Code 快捷键 Mac 版 CSDN\nhttps://code.visualstudio.com/docs/getstarted/keybindings\n","date":"2024-05-07","externalUrl":null,"permalink":"/posts/vscode_tutorial/","section":"文章","summary":"","title":"Mac版Vscode快捷键速查","type":"posts"},{"content":"","date":"2024-05-07","externalUrl":null,"permalink":"/tags/%E6%9F%A5%E8%AF%A2/","section":"Tags","summary":"","title":"查询","type":"tags"},{"content":" 1. 光标控制 # 快捷键 描述 ⌃ + a 到行首 ⌃ + e 行末 ⌃ + f/b 前进后退，相当于左右方向键 ⌃ + p 上一条命令，相当于方向键上 ⌃ + r 搜索命令历史 ⌃ + d 删除当前字符 ⌃ + h 删除之前的字符 ⌃ + w 删除光标前的单词 ⌃ + k 删除到文本末尾 ⌃ + t 交换光标处文本 ⌘ + —/+/0 调整字体大小 ⌘ + r 清屏 ⌃ + l 清屏（滚动到新的一屏） 2. 终端操作快捷键 # 2.1 窗口面板管理：一个窗口分割 # 快捷键 描述 垂直分割 ⌘ + D 水平分割 ⇧ + ⌘ + D 前一个面板 ⌘ + [ 或 ⌥ + ⌘ + 左右方向键 后一个面板 ⌘ + ] 切换到上/下/左/右面板 ⌥ + ⌘ + 上下左右方向键 关闭panel ⌘ + w 最大化Tab中的pane，隐藏本Tab中的其他pane ⌘+ ⇧ +enter 2.2 新建Tab标签页 # 快捷键 描述 新建标签页 ⌘ + T 关闭标签页 ⌘ + W 前一个标签页 ⌘ + 左方向键，⇧ + ⌘ + [ 后一个标签页 ⌘ + 右方向键，⇧ + ⌘ + ] 进入标签页 ⌘ + 标签页编号 Expose 标签页 ⌥ + ⌘ + E 快速定位光标位置 ⌘ + / 2.3 多个窗口操作 # 快捷键 描述 新建窗口 ⌘ + N 关闭窗口 ⌘ + w 前一个窗口 ⌘ + ` 后一个窗口 ⇧ + ⌘ + ` 进入窗口 ⌥ + ⌘ + 编号 2.4 其他功能 # 支持自定义全局快捷键用于显示和隐藏iTerm2 Preference -\u0026gt; Keys －\u0026gt; Show/hide iTerm2 with a system-wide hotkey 打上勾之后 快捷键 描述 进入和退出全屏 ⌘ + Enter 查看光标位置 ⌘ + / 命令自动补全 ⌘ + ;（较少使用，Zsh补全更佳） 开启/关闭背景半透明 ⌘ + u 清屏 ⌘ + r 2.4.1 粘贴历史 # 使用⌘ + ⇧ + h 可以呼出粘贴历史，支持模糊检索。还可以设置将粘贴历史保存在磁盘上（Preferences -\u0026gt; General）\n2.4.2 即时回放 # 使用⌘ + Opt + b 打开即时回放，按Esc退出。即时回放可以记录终端输出的状态，让你“穿越时间”查看终端内容。默认每个会话最多储存4MB的内容，可以在设置中更改（Preferences -\u0026gt; Genernal -\u0026gt; Instant Replay）。\n2.5 自定义快捷键设置 # 2.5.1设置光标按照单词快速移动 # iTerm2之后，发现⌥+←和⌥+→这两组快捷键并不能实现光标按照单词快速移动，\n在Mac自带的终端中是可以使用这两个快捷键的，经过查找和测试发现，需要重新配置相应的映射。iTerm2中将这两组快捷键用作了其他的功能。\n打开iTerm2的Preferences设置 选择相应的Profile（默认为Default），选择“Keys”选项卡，然后可以在Key Mappings看到⌥+←和⌥+→这两组快捷键用作了其他功能，这里我们只需要重新绑定新的映射即可 找到⌥+← ， 双击就会弹出一个编辑框，选择Action为“Send Escape Sequence”, 然后在 Esc+选项中输入b 找到⌥+→， 双击就会弹出一个编辑框，选择Action为“Send Escape Sequence”, 然后在 Esc+选项中输入f 修改映射之后，再重新启动iTerm2就可以使用⌥+←和⌥+→来实现光标按单词快速移动了，非常方便。如果不想使用⌥+←和⌥+→这两个组合键的话，也可以自行添加新的Shortcut即可。\n3. 个性化的设置 # 3.1 设置无分栏边框 # preference-\u0026gt;appearance：\n取消：Show per-pane title bar with split panes\n勾选：Hide scrollbars\n3.2 终端显示边框 # preference-\u0026gt;appearance：\n勾选：Show border around window\n3.2 显示、隐藏终端快捷键 # Preferences -\u0026gt; Keys -\u0026gt; Hotkey:\n勾选： Show/hide iTerm2 with a system-wide hotkey\n然后在下面的Hotkey里面填上F12，\n这个F12可能被系统占用了，这修改系统的快捷键，或更换别的快捷键。\n3.3 鼠标移动切换窗口 # 当一个终端打开了多个窗口，可以设置鼠标移动窗口时获取焦点\nPreferences -\u0026gt; Pointer:\n勾选：Focus follows mouse\n3.4 设置光标形状 # Preferences -\u0026gt; Profiles -\u0026gt; Profile Name -\u0026gt; Text -\u0026gt; Cursor\n选择一个自己喜欢的样式\n3.5 新窗口打开的路径跟当前终端的路径一直 # Preferences -\u0026gt; Profiles -\u0026gt; General -\u0026gt; Working Directory -\u0026gt; reuse previous session\u0026rsquo;s directory\n3.6 新窗口在电脑获取焦点的窗口生成 # Preferences -\u0026gt; Profiles -\u0026gt; General -\u0026gt; Window -\u0026gt; Settings for New Windows -\u0026gt; Screen\n选择：No Preference\n或者选择：Screen with Cursor（在鼠标的窗口）\n3.7 设置开机启动不显示界面 # 1、打开系统设置(System Perferences) -\u0026gt; 用户与群组(User \u0026amp; groups) -\u0026gt; 登陆项(Login Items)， 点击加号，然后去应用程序里面找到Iterm2添加到启动项里面。 2、启动iterm2程序，打开一个窗口，然后手动点击关闭按钮，确保电脑右上角苹果图标右边是iTerm2,然后 按【⌘】+【⇧】+【S】，保存名为No Window 3、打开一个iterm2终端界面，然后按cmd + ,打开iterm的设置界面，选择Arrangements，点击刚才保存的No Window， 然后点击Set Default。 4、在iterm的设置界面选择General, 在Startup中选择Open Default Window Arrangement。\n参考资料 # iterm2使用快捷键\n关于iTerm2 你不知道的一些事\nMac下iTerm2光标按照单词快速移动设置\n打造有情怀的 iTerm2 终端\n","date":"2024-05-06","externalUrl":null,"permalink":"/posts/iterm2_tutorial/","section":"文章","summary":"","title":"Iterm2快捷键速查","type":"posts"},{"content":"","date":"2024-04-11","externalUrl":null,"permalink":"/tags/latex/","section":"Tags","summary":"","title":"Latex","type":"tags"},{"content":"在论文编写，ppt，word，Markdown，Latex等文档编辑过程中经常会遇到一些符号编辑记不住的问题，这里转载一下latex说明文档上的一些内容，方便自查。\nPart 1：希腊/希伯来字符、数学构造符号、分隔符、公式中可变长度的符号、标准函数 # Part 2：二元运算符和关系符号 # Part 3：箭头、微积分集合、音乐符、数学mode声调 # Part 4：Array环境、其他数学风格、字体大小、文本声调符号 # ","date":"2024-04-11","externalUrl":null,"permalink":"/posts/latex_symbols/","section":"文章","summary":"","title":"Latex相关符号速查手册","type":"posts"},{"content":"","date":"2024-04-11","externalUrl":null,"permalink":"/tags/markdown/","section":"Tags","summary":"","title":"Markdown","type":"tags"},{"content":"","date":"2024 April 11","externalUrl":null,"permalink":"/en/tags/query/","section":"Tags","summary":"","title":"Query","type":"tags"},{"content":" 图网络 # 背景 # ​常见的神经网络，如BP神经网络可以用来处理表格型的数据，卷积神经网络可以用来处理图片数据，循环神经网络则可以用来处理序列数据，这些数据都是结构化的数据，当我们需要处理的数据为图这种非结构化的数据，例如：城市交通的每个路口上的传感器所记录的数据；化学分子结构；人际关系网；推荐系统中每个人构成的图。并不是说以上的神经网络处理不了图这种类型的数据，只是在处理图这种数据上存在欠缺，图数据有一个很明显的特征，相邻或相近的节点存在一定的空间依赖关系，这种关系传统神经网络很难捕获。为了获取表示这种特征关系，图网络就此诞生。\n内容 # ​图网络的核心思想就是依据图结构的空间依赖关系来表征现实世界中真实的特征之间的相互作用关系，通过对节点特征进行聚合生成新的节点特征表示用于后续工作。\n​下图为一张交通系统的图结构，在6个位置上分别有一个传感器记录了一段时间的交通流量数据，现在的目标是要预测接下来每个位置上未来一段时间的流量。如果从传统的时间序列模型来思考，未来的数据一定是与过去的数据相关，因此我们可以对6个位置的时间序列单独进行预测生成6个位置未来的预测值，但是这样就没有考虑到节点之间的空间依赖关系。既然已经用图结构表示出了这种空间关系，那么我们怎么去应用它？这就是图网络所要解决的问题。\nGCN(Graph Convolutional Network) # 论文：https://arxiv.org/pdf/1609.02907.pdf\n​GCN（图卷积神经网络），实际上跟CNN（卷积神经网络）的作用一样，就是一个特征提取器，只不过它的对象是图数据。GCN精妙地设计了一种从图数据中提取特征的方法，从而让我们可以使用这些特征去对图数据进行节点分类（node classification）、图分类（graph classification）、边预测（link prediction），还可以顺便得到图的嵌入表示（graph embedding）。下图为GCN和输入图像数据的CNN间的对比。\n常规邻接矩阵 # 假设有一批图数据，其中有N个节点（node），每个节点都有自己的特征，假设特征一共有D个，我们设这些节点的特征组成一个N×D维的矩阵X，然后各个节点之间的关系也会形成一个N×N维的矩阵A，也称为邻接矩阵（adjacency matrix）。X和A便是我们模型的输入。\n假设现在有这样一个图结构，有ABCDE五个节点，每个节点之间的相互关系以及每个节点的特征如下图。\n现在我要重新计算E的特征，根据GCN的基本思想，就是要聚合其邻居节点的信息，也就是ABCD的特征以一定方式进行聚合（平均、求和、拼接等），以求和为例：\n因为E和ABCD四个节点都相连，因此其聚类后的新特征为ABCD四点对应特征之和。而如果将其放在矩阵乘法运算中则为邻接矩阵和特征矩阵的乘积：\n设n为节点数，f为每个节点的特征维度，则邻接矩阵A的形状为 (n,n) ,特征矩阵的形状为 (n,f) ，AX相乘后表示考虑到邻居节点信息的新的特征矩阵，形状为 (n,f) ，每一行表示一个节点的特征，可以看出新的E节点，我们能一次性将所有的节点特征表示出来。\n考虑自身信息的邻接矩阵 # 刚刚提到的常规的邻接矩阵的中，两个不同的节点B和C在经过邻接矩阵的运算后，新的特征向量完全一致，然而这是两个具有不同位置信息、不同特征的不同节点，得出来一样的结果明显是不合理的。因此为了防止这种情况，在计算新的节点特征时，不仅要考虑邻居节点的信息，也可以将自身节点的信息考虑进去。在邻接矩阵上面的表现就是加上了一个单位阵： $$ \\tilde A = A + I $$ 接着将得到的新邻接矩阵与特征矩阵相乘的到新的特征矩阵\n可以看出，加入单位矩阵之后，B和C虽然具有相同的邻居，但是由于自身的特征不一样，所以空间变换后的特征也不一样。单位矩阵的加入，使得矩阵相乘时，考虑到了自身节点的信息的因素。\n求平均/归一化 # 采用之前的方式，相当于我们对所有节点的邻居及自身进行了求和，但是这种聚合方式是有问题的，相当于我们变相的改变了特征的量级。我们每进行一次聚合，就加大了一次量级。随着迭代的增加，量级会越来越大，假设现在我要求小明的收入，那么采用求和的方式就会将小明的邻居朋友们及自己的收入加起来，这显然是错误的。因此更好地方式是求平均，类比到图结构中就是左乘我们的度矩阵。\n其中度矩阵就是与该节点相邻节点的数据，因此就是邻接矩阵A每一行的求和组成的对角阵 $$ D=\\Sigma_jA_{ij} $$\n同样的这种方式也只考虑到了邻居节点的个数而没有考虑到自身的信息，因此在度矩阵D上在加上单位阵 I ，也即$\\tilde A$的每一行的求和，即： $$ \\tilde D=D+I=\\Sigma_j\\tilde A_{ij} $$ 所以最终的求平均的操作就为 $ \\tilde D^{-1}\\tilde AX$，由于矩阵乘法满足结合律，所以 $ \\tilde D^{-1}\\tilde AX = \\tilde D^{-1}(\\tilde AX)$，又由于 $ \\tilde D^{-1}$ 为初等矩阵，左乘初等矩阵相当于行变换，所以相当于对$ \\tilde AX $的每一行除以度，相当于对每一个节点求和后的特征做平均。\n这就是邻接矩阵的归一化。\n","date":"2024-04-07","externalUrl":null,"permalink":"/posts/gnn_pt1/","section":"文章","summary":"","title":"图神经网络学习笔记（1）","type":"posts"},{"content":"","date":"2024 April 3","externalUrl":null,"permalink":"/en/tags/env-config/","section":"Tags","summary":"","title":"Env Config","type":"tags"},{"content":"","date":"2024-04-03","externalUrl":null,"permalink":"/tags/jupyter/","section":"Tags","summary":"","title":"Jupyter","type":"tags"},{"content":"","date":"2024-04-03","externalUrl":null,"permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux","type":"tags"},{"content":"","date":"2024-04-03","externalUrl":null,"permalink":"/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","section":"Tags","summary":"","title":"环境配置","type":"tags"},{"content":" 转载自本人实习期间于公司内部撰写的环境配置教程，已对其中内容进行了脱敏处理\nWhy this？ # jupyter lab是一个基于Web的交互式开发环境，可以让用户以可视化的方式编辑、运行和分享代码。用户可以分步执行代码，可以进行数据分析、科学计算、机器学习等各种任务。尤其对于pyspark等数据处理任务来说，使用jupyter可以显示每一个过程的运行结果，便于加深对数据处理的理解和代码的学习。\nzsh是bash的替代品，两者功能几乎相同，但通过oh-my-zsh这样一个配置管理工具，zsh可以安装各种插件、主题，用户能够根据自己的需求和偏好进行个性化定制，提升开发效率。\n配置jupyter # 首先进入服务器\nssh your_server_address 安装anaconda # 在清华镜像源下载安装脚本https://repo.anaconda.com/archive/ 请根据服务器架构选择对应版本\n在服务器自己的环境中执行安装脚本，一路yes之后默认会安装在路径 ~/anaconda3 下，尝试执行conda \u0026ndash;version即可检测是否已安装成功。如果找不到命令尝试重进或source ~/.bashrc\n安装jupyter # 建立子环境安装jupyter相关常用包，将-n后虚拟环境的名称修改为自己起的环境名\nconda create -n py3.7_env python=3.7 jupyterlab numpy pandas scipy 进入~/.bashrc在最后添加以下内容，其作用是设置安装了jupyter的环境默认启动并配置hdfs常用命令。将第一行环境名改为之前自己创建的环境名称，HHOME及sp改为自己的名字\nconda activate py3.7_env export HADOOP_USER_NAME=xxx export HADOOP_USER_PASSWORD=xxx export HHOME=\u0026#39;/user/bigdata-dp/your_name\u0026#39; export LD_LIBRARY_PATH=/lib:/usr/lib:/usr/local/lib alias hls=\u0026#34;hadoop fs -ls\u0026#34; alias hget=\u0026#34;hadoop fs -get\u0026#34; alias hput=\u0026#34;hadoop fs -put\u0026#34; alias hcat=\u0026#34;hadoop fs -cat\u0026#34; alias http=\u0026#34;python -m http.server\u0026#34; alias hdu=\u0026#34;hadoop fs -du -h\u0026#34; 设置启动脚本 # 进入路径/home/odin/your_name/anaconda3/envs，请将其中名字替换为自己的名字\n执行 tar -czvf my_py37.tar ./py3.7_env 将conda环境打包，请将环境名、tar包名替换为自己的名字\n将打好的tar包上传到hdfs中自己指定的目录下\nvim start_jupyter.sh并在其中添加以下内容，注意需要将以下内容作替换：\nPYSPARK_DRIVER_PYTHON_OPTS中ip是服务器ip，端口选一个不被占用的就行 pyspark \u0026ndash;name改为自己起的名字 \u0026ndash;archives下路径改为之前上传到hdfs的tar包的路径 spark.yarn.appMasterEnv.PYSPARK_PYTHON改为自己名字路径 export HADOOP_USER_NAME=xxx export HADOOP_USER_PASSWORD=xxx export PYSPARK_DRIVER_PYTHON=jupyter export PYSPARK_DRIVER_PYTHON_OPTS=\u0026#39;lab --port=8066 --ip=your_ip_address\u0026#39; export SPARK_HOME=/usr/local/spark-current pyspark --name your_name_data_process \\ --queue root.your_queue_name \\ --driver-memory 8g --executor-memory 13g \\ --executor-cores 3 --num-executors 100 \\ --conf spark.task.cpus=3 \\ --conf \u0026#34;spark.driver.extraJavaOptions=-Dcom.github.fommil.netlib.BLAS=com.github.fommil.netlib.F2jBLAS\u0026#34; \\ --conf \u0026#34;spark.executor.extraJavaOptions=-Dcom.github.fommil.netlib.BLAS=com.github.fommil.netlib.F2jBLAS\u0026#34;\\ --conf spark.default.parallelism=1300 \\ --conf spark.sql.shuffle.partitions=1300 \\ --conf spark.sql.broadcastTimeout=3600 \\ --conf spark.shuffle.memoryFraction=0.6 \\ --conf spark.yarn.executor.memoryoverhead=13000M \\ --conf spark.yarn.appMasterEnv.PYSPARK_PYTHON=./mypython/py3.7_env/bin/python \\ --conf spark.port.maxRetries=300 \\ --conf spark.yarn.priority=100 \\ --archives hdfs://DClusterNmg3:8020/user/your_path/your_name/my_py37.tar#mypython \\ 执行nohup sh start_jupyter.sh \u0026gt;jupyter.log\u0026amp;即可启动jupyter服务，在jupyter.log中可以找到访问链接，复制到浏览器打开即可使用\n(可选)安装暗色模式jupyter lab界面，看自己需求安装，安装好之后在settings-\u0026gt;theme中可以更换\npip install jupyterlab_darkside_ui -i https://pypi.tuna.tsinghua.edu.cn/simple (可选)更换语言为中文:\npip3 install jupyterlab-language-pack-zh-CN -i https://pypi.tuna.tsinghua.edu.cn/simple (可选)添加代码补全和代码提示:\npip3 install jupyterlab-lsp -i https://pypi.tuna.tsinghua.edu.cn/simple pip3 install -U jedi-language-server -i https://pypi.tuna.tsinghua.edu.cn/simple 完成修改后，设置-\u0026gt;高级设置编辑器-\u0026gt;Code Completion-\u0026gt;Json编辑器 添加以下内容\n{ \u0026#34;continuousHinting\u0026#34;: true } 配置zsh # 考虑到安装oh-my-zsh需要访问github链接，而服务器往往访问速度较慢，因此建议先在本地安装再将其复制到服务器上，也省去了重复安装插件的时间\n本地安装oh-my-zsh(MacOS) # mac本地默认安装有zsh，因此只需要安装oh-my-zsh即可。执行\nsh -c \u0026#34;$(curl -fsSL https://install.ohmyz.sh/)\u0026#34; 或\nsh -c \u0026#34;$(wget -O- https://install.ohmyz.sh/)\u0026#34; 安装好之后shell自动会从bash切换为zsh界面。\n按需安装以下两个插件：\nzsh-autosuggestions（命令联想）：记录以前输入过的命令，下次输入的时候自动推测联想 git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions zsh-syntax-highlighting（语法高亮）：根据是否可以执行该shell命令显示不同颜色 git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting 安装好以上两个插件后编辑~/.zshrc，在其中plugins部分添加你已经安装好的插件名\nplugins=( # other plugins... zsh-autosuggestions zsh-syntax-highlighting ) 接着执行source ~/.zshrc即可\n服务器安装zsh(Linux) # 与MacOS不同，Linux环境下终端没有zsh，因此需要先安装zsh，再进行oh-my-zsh的配置\n考虑到Linux常为远程服务器，可能网速较差。因此在这里选择使用sftp命令将本地已安装好的zsh直接复制到服务器上\nput -r ~/.oh-my-zsh put ~/.zshrc 在服务器上自己环境下执行以下命令下载zsh安装包\nwget -O zsh.tar.xz https://sourceforge.net/projects/zsh/files/latest/download --no-check-certificate 如果因为网络问题无法下载，就在本地执行以上命令并用sftp传到服务器上\n执行命令解压安装包 tar -xvf zsh.tar.xz ，会生成一个zsh-5.9的目录\n进入zsh-5.9目录，顺序执行以下三条命令将zsh进行编译和安装。prefix指定要安装的目录，可以自己建个文件夹\ncd zsh-5.9 ./configure -prefix=xxx make -j all make install 安装完成后打开~/.bashrc添加以下内容在conda activate之前，PATH请改为上一步安装zsh路径下的bin，保存退出后先不要source\nexport PATH=$PATH:/home/odin/your_name/my_zsh/bin exec zsh 服务器安装oh-my-zsh(Linux) # cd ~ 到主目录后，用sftp get将之前上传的.oh-my-zsh文件夹及.zshrc获取\nvim ~/.zshrc在最后添加以下两段内容。下方的内容只是示例，请从自己的.bashrc中找到对应内容进行复制\n# \u0026gt;\u0026gt;\u0026gt; conda initialize \u0026gt;\u0026gt;\u0026gt; # !! Contents within this block are managed by \u0026#39;conda init\u0026#39; !! __conda_setup=\u0026#34;$(\u0026#39;/home/odin/your_name/anaconda3/bin/conda\u0026#39; \u0026#39;shell.bash\u0026#39; \u0026#39;hook\u0026#39; 2\u0026gt; /dev/null)\u0026#34; if [ $? -eq 0 ]; then eval \u0026#34;$__conda_setup\u0026#34; else if [ -f \u0026#34;/home/odin/your_name_i/anaconda3/etc/profile.d/conda.sh\u0026#34; ]; then . \u0026#34;/home/odin/your_name_i/anaconda3/etc/profile.d/conda.sh\u0026#34; else export PATH=\u0026#34;/home/odin/your_name/anaconda3/bin:$PATH\u0026#34; fi fi unset __conda_setup # \u0026lt;\u0026lt;\u0026lt; conda initialize \u0026lt;\u0026lt;\u0026lt; conda activate py3.7_env export HADOOP_USER_NAME=xxx export HADOOP_USER_PASSWORD=xxxxx export HHOME=\u0026#39;/user/bigdata-dp/your_name\u0026#39; export LD_LIBRARY_PATH=/lib:/usr/lib:/usr/local/lib alias hls=\u0026#34;hadoop fs -ls\u0026#34; alias hget=\u0026#34;hadoop fs -get\u0026#34; alias hput=\u0026#34;hadoop fs -put\u0026#34; alias hcat=\u0026#34;hadoop fs -cat\u0026#34; alias http=\u0026#34;python -m http.server\u0026#34; alias hdu=\u0026#34;hadoop fs -du -h\u0026#34; 在.zshrc最后再添加以下内容防止zsh颜色显示出现问题\nexport TERM=xterm-256color 保存.zshrc退出后执行 source ~/.bashrc即可完成安装\n(可选)更换主题：通过修改~/.zshrc中ZSH_THEME=\u0026ldquo;robbyrussell\u0026quot;可以替换不同的主题，参考以下网页中的内容可以进行替换: https://github.com/ohmyzsh/ohmyzsh/wiki/Themes\n(可选)更换字体，自定义zsh主题: https://juejin.cn/post/6844904178075058189#heading-32\n","date":"2024-04-03","externalUrl":null,"permalink":"/posts/build_jupyter_zsh/","section":"文章","summary":"","title":"使用MacOS为本地及服务器配置jupyter及zsh","type":"posts"},{"content":"不同Hugo主题对Markdown语法的支持程度不同，因此本页面用于检测不同Markdown语法在本主题中的兼容情况\n语言分块 # All I can think about is you!\nWell down! It\u0026rsquo;s good!\nNext paragraph!\n斜体 # well down\n分割线 # 粗体 # good\n粗斜体 # well\n横线 # well\n下划线 # underline\n脚注 # 要介绍的是1\n列表 # 第一点 第二点 第二第一 211 wo wowo wo 牛啊 good 212 第二第二 ho ho again 第三点 第四点 区块引用 # 区块引用\n这真是太棒了\n内部嵌套\n哇哦\n函数块 # printf()是一个C语言函数\n代码块 # int a = 0; void printALL{ for(int i = 0 ;i \u0026lt; a;i++){ cout \u0026lt;\u0026lt; \u0026#34;Ho\u0026#34;; } } 链接 # 百度官方网站 百度\nhttps://www.baidu.com\n这个链接 good\n图片 # 表格 # title1 title2 title3 one things two things three things first second third 键盘块 # shift and del = S Latex # $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n$$ f(a,b,c) = (a^2+b^2+c^2)^3 $$\nMermaid # 横向流程图 # graph LR A[方形] --\u003eB(圆角) B --\u003e C{条件a} C --\u003e|a=1| D[结果1] C --\u003e|a=2| E[结果2] F[横向流程图] 纵向流程图 # graph TD A[方形] --\u003e B(圆角) B --\u003e C{条件a} C --\u003e |a=1| D[结果1] C --\u003e |a=2| E[结果2] F[竖向流程图] 标准纵向流程图 # st=\u003estart: 开始框 op=\u003eoperation: 处理框 cond=\u003econdition: 判断框(是或否?) sub1=\u003esubroutine: 子流程 io=\u003einputoutput: 输入输出框 e=\u003eend: 结束框 st-\u003eop-\u003econd cond(yes)-\u003eio-\u003ee cond(no)-\u003esub1(right)-\u003eop UML时序图 # sequenceDiagram participant 张三 participant 李四 张三-\u003e王五: 王五你好吗？ loop 健康检查 王五-\u003e王五: 与疾病战斗 end Note right of 王五: 合理 食物 看医生... 李四--\u003e\u003e张三: 很好! 王五-\u003e李四: 你怎么样? 李四--\u003e王五: 很好! 标准UML时序图 # 对象A-\u003e对象B: 对象B你好吗?（请求） Note right of 对象B: 对象B的描述 Note left of 对象A: 对象A的描述(提示) 对象B--\u003e对象A: 我很好(响应) 对象A-\u003e对象B: 你真的好吗？ 脚注尾部 # A game company\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2024-04-03","externalUrl":null,"permalink":"/posts/markdown_test/","section":"文章","summary":"","title":"Markdown语法兼容性测试","type":"posts"},{"content":"","date":"2024-04-03","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"2024-04-03","externalUrl":null,"permalink":"/tags/%E6%B5%8B%E8%AF%95/","section":"Tags","summary":"","title":"测试","type":"tags"},{"content":"","date":"2024-04-03","externalUrl":null,"permalink":"/series/%E6%B5%8B%E8%AF%95%E7%94%A8%E5%86%85%E5%AE%B9/","section":"Series","summary":"","title":"测试用内容","type":"series"},{"content":" 你好，世界！ # 这是本站的第一篇推文\n本站使用基于Go的Hugo引擎构建于Github Pages\n本文的剩余部分用于测试 本主题(Blowfish) 独有的各种语法功能\n测试警告语句 测试Timeline语句\nheader Repository Github建立仓库 2024.04.02 于Github建立网站代码仓库 Another Awesome Header code 代码编写 2024.04.03选取构建代码引擎 Jekyll-Hydejeck Hugo-Blowfish Shortcodes AWESOME 2024.04.03上传第一篇推文 测试嵌入Youtube视频\n","date":"2024-04-03","externalUrl":null,"permalink":"/posts/first_page/","section":"文章","summary":"","title":"Hello World","type":"posts"},{"content":"","date":"0001-01-01","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","date":"0001-01-01","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"}]