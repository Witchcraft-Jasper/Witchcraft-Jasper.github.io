


[{"content":"","date":"2024-04-03","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"2024-04-03","externalUrl":null,"permalink":"/","section":"Witchcraft's space","summary":"","title":"Witchcraft's space","type":"page"},{"content":" 如何配置jupyter及zsh # 转载自本人实习期间于公司内部撰写的环境配置教程，已对其中内容进行了脱敏处理\nWhy this？ # jupyter lab是一个基于Web的交互式开发环境，可以让用户以可视化的方式编辑、运行和分享代码。用户可以分步执行代码，可以进行数据分析、科学计算、机器学习等各种任务。尤其对于pyspark等数据处理任务来说，使用jupyter可以显示每一个过程的运行结果，便于加深对数据处理的理解和代码的学习。\nzsh是bash的替代品，两者功能几乎相同，但通过oh-my-zsh这样一个配置管理工具，zsh可以安装各种插件、主题，用户能够根据自己的需求和偏好进行个性化定制，提升开发效率。\n配置jupyter # 首先进入服务器\nssh your_server_address 安装anaconda # 在清华镜像源下载安装脚本https://repo.anaconda.com/archive/ 请根据服务器架构选择对应版本\n在服务器自己的环境中执行安装脚本，一路yes之后默认会安装在路径 ~/anaconda3 下，尝试执行conda \u0026ndash;version即可检测是否已安装成功。如果找不到命令尝试重进或source ~/.bashrc\n安装jupyter # 建立子环境安装jupyter相关常用包，将-n后虚拟环境的名称修改为自己起的环境名\nconda create -n py3.7_env python=3.7 jupyterlab numpy pandas scipy 进入~/.bashrc在最后添加以下内容，其作用是设置安装了jupyter的环境默认启动并配置hdfs常用命令。将第一行环境名改为之前自己创建的环境名称，HHOME及sp改为自己的名字\nconda activate py3.7_env export HADOOP_USER_NAME=xxx export HADOOP_USER_PASSWORD=xxx export HHOME=\u0026#39;/user/bigdata-dp/your_name\u0026#39; export LD_LIBRARY_PATH=/lib:/usr/lib:/usr/local/lib alias hls=\u0026#34;hadoop fs -ls\u0026#34; alias hget=\u0026#34;hadoop fs -get\u0026#34; alias hput=\u0026#34;hadoop fs -put\u0026#34; alias hcat=\u0026#34;hadoop fs -cat\u0026#34; alias http=\u0026#34;python -m http.server\u0026#34; alias hdu=\u0026#34;hadoop fs -du -h\u0026#34; 设置启动脚本 # 进入路径/home/odin/your_name/anaconda3/envs，请将其中名字替换为自己的名字\n执行 tar -czvf my_py37.tar ./py3.7_env 将conda环境打包，请将环境名、tar包名替换为自己的名字\n将打好的tar包上传到hdfs中自己指定的目录下\nvim start_jupyter.sh并在其中添加以下内容，注意需要将以下内容作替换：\nPYSPARK_DRIVER_PYTHON_OPTS中ip是服务器ip，端口选一个不被占用的就行 pyspark \u0026ndash;name改为自己起的名字 \u0026ndash;archives下路径改为之前上传到hdfs的tar包的路径 spark.yarn.appMasterEnv.PYSPARK_PYTHON改为自己名字路径 export HADOOP_USER_NAME=xxx export HADOOP_USER_PASSWORD=xxx export PYSPARK_DRIVER_PYTHON=jupyter export PYSPARK_DRIVER_PYTHON_OPTS=\u0026#39;lab --port=8066 --ip=your_ip_address\u0026#39; export SPARK_HOME=/usr/local/spark-current pyspark --name your_name_data_process \\ --queue root.your_queue_name \\ --driver-memory 8g --executor-memory 13g \\ --executor-cores 3 --num-executors 100 \\ --conf spark.task.cpus=3 \\ --conf \u0026#34;spark.driver.extraJavaOptions=-Dcom.github.fommil.netlib.BLAS=com.github.fommil.netlib.F2jBLAS\u0026#34; \\ --conf \u0026#34;spark.executor.extraJavaOptions=-Dcom.github.fommil.netlib.BLAS=com.github.fommil.netlib.F2jBLAS\u0026#34;\\ --conf spark.default.parallelism=1300 \\ --conf spark.sql.shuffle.partitions=1300 \\ --conf spark.sql.broadcastTimeout=3600 \\ --conf spark.shuffle.memoryFraction=0.6 \\ --conf spark.yarn.executor.memoryoverhead=13000M \\ --conf spark.yarn.appMasterEnv.PYSPARK_PYTHON=./mypython/py3.7_env/bin/python \\ --conf spark.port.maxRetries=300 \\ --conf spark.yarn.priority=100 \\ --archives hdfs://DClusterNmg3:8020/user/your_path/your_name/my_py37.tar#mypython \\ 执行nohup sh start_jupyter.sh \u0026gt;jupyter.log\u0026amp;即可启动jupyter服务，在jupyter.log中可以找到访问链接，复制到浏览器打开即可使用\n(可选)安装暗色模式jupyter lab界面，看自己需求安装，安装好之后在settings-\u0026gt;theme中可以更换\npip install jupyterlab_darkside_ui -i https://pypi.tuna.tsinghua.edu.cn/simple 配置zsh # 考虑到安装oh-my-zsh需要访问github链接，而服务器往往访问速度较慢，因此建议先在本地安装再将其复制到服务器上，也省去了重复安装插件的时间\n本地安装oh-my-zsh(MacOS) # mac本地默认安装有zsh，因此只需要安装oh-my-zsh即可。执行\nsh -c \u0026#34;$(curl -fsSL https://install.ohmyz.sh/)\u0026#34; 或\nsh -c \u0026#34;$(wget -O- https://install.ohmyz.sh/)\u0026#34; 安装好之后shell自动会从bash切换为zsh界面。\n按需安装以下两个插件：\nzsh-autosuggestions（命令联想）：记录以前输入过的命令，下次输入的时候自动推测联想 git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions zsh-syntax-highlighting（语法高亮）：根据是否可以执行该shell命令显示不同颜色 git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting 安装好以上两个插件后编辑~/.zshrc，在其中plugins部分添加你已经安装好的插件名\nplugins=( # other plugins... zsh-autosuggestions zsh-syntax-highlighting ) 接着执行source ~/.zshrc即可\n服务器安装zsh(Linux) # 与MacOS不同，Linux环境下终端没有zsh，因此需要先安装zsh，再进行oh-my-zsh的配置\n考虑到Linux常为远程服务器，可能网速较差。因此在这里选择使用sftp命令将本地已安装好的zsh直接复制到服务器上\nput -r ~/.oh-my-zsh put ~/.zshrc 在服务器上自己环境下执行以下命令下载zsh安装包\nwget -O zsh.tar.xz https://sourceforge.net/projects/zsh/files/latest/download --no-check-certificate 如果因为网络问题无法下载，就在本地执行以上命令并用sftp传到服务器上\n执行命令解压安装包 tar -xvf zsh.tar.xz ，会生成一个zsh-5.9的目录\n进入zsh-5.9目录，顺序执行以下三条命令将zsh进行编译和安装。prefix指定要安装的目录，可以自己建个文件夹\ncd zsh-5.9 ./configure -prefix=xxx make -j all make install 安装完成后打开~/.bashrc添加以下内容在conda activate之前，PATH请改为上一步安装zsh路径下的bin，保存退出后先不要source\nexport PATH=$PATH:/home/odin/your_name/my_zsh/bin exec zsh 服务器安装oh-my-zsh(Linux) # cd ~ 到主目录后，用sftp get将之前上传的.oh-my-zsh文件夹及.zshrc获取\nvim ~/.zshrc在最后添加以下两段内容。下方的内容只是示例，请从自己的.bashrc中找到对应内容进行复制\n# \u0026gt;\u0026gt;\u0026gt; conda initialize \u0026gt;\u0026gt;\u0026gt; # !! Contents within this block are managed by \u0026#39;conda init\u0026#39; !! __conda_setup=\u0026#34;$(\u0026#39;/home/odin/your_name/anaconda3/bin/conda\u0026#39; \u0026#39;shell.bash\u0026#39; \u0026#39;hook\u0026#39; 2\u0026gt; /dev/null)\u0026#34; if [ $? -eq 0 ]; then eval \u0026#34;$__conda_setup\u0026#34; else if [ -f \u0026#34;/home/odin/your_name_i/anaconda3/etc/profile.d/conda.sh\u0026#34; ]; then . \u0026#34;/home/odin/your_name_i/anaconda3/etc/profile.d/conda.sh\u0026#34; else export PATH=\u0026#34;/home/odin/your_name/anaconda3/bin:$PATH\u0026#34; fi fi unset __conda_setup # \u0026lt;\u0026lt;\u0026lt; conda initialize \u0026lt;\u0026lt;\u0026lt; conda activate py3.7_env export HADOOP_USER_NAME=xxx export HADOOP_USER_PASSWORD=xxxxx export HHOME=\u0026#39;/user/bigdata-dp/your_name\u0026#39; export LD_LIBRARY_PATH=/lib:/usr/lib:/usr/local/lib alias hls=\u0026#34;hadoop fs -ls\u0026#34; alias hget=\u0026#34;hadoop fs -get\u0026#34; alias hput=\u0026#34;hadoop fs -put\u0026#34; alias hcat=\u0026#34;hadoop fs -cat\u0026#34; alias http=\u0026#34;python -m http.server\u0026#34; alias hdu=\u0026#34;hadoop fs -du -h\u0026#34; 在.zshrc最后再添加以下内容防止zsh颜色显示出现问题\nexport TERM=xterm-256color 保存.zshrc退出后执行 source ~/.bashrc即可完成安装\n(可选)更换主题：通过修改~/.zshrc中ZSH_THEME=\u0026ldquo;robbyrussell\u0026quot;可以替换不同的主题，参考以下网页中的内容可以进行替换: https://github.com/ohmyzsh/ohmyzsh/wiki/Themes\n(可选)更换字体，自定义zsh主题: https://juejin.cn/post/6844904178075058189#heading-32\n","date":"2024-04-03","externalUrl":null,"permalink":"/posts/my-post/build_jupyter_zsh/","section":"Posts","summary":"","title":"使用MacOS为本地及服务器配置jupyter及zsh","type":"posts"},{"content":" 使用Hugo构建于Github Pages\n不同Hugo主题对Markdown语法的支持程度不同，因此本页面用于检测不同Markdown语法在本主题中的兼容情况\n语言分块 # All I can think about is you!\nWell down! It\u0026rsquo;s good!\nNext paragraph!\n斜体 # well down\n分割线 # 粗体 # good\n粗斜体 # well\n横线 # well\n下划线 # underline\n脚注 # 要介绍的是1\n列表 # 第一点 第二点 第二第一 211 wo wowo wo 牛啊 good 212 第二第二 ho ho again 第三点 第四点 区块引用 # 区块引用\n这真是太棒了\n内部嵌套\n哇哦\n函数块 # printf()是一个C语言函数\n代码块 # int a = 0; void printALL{ for(int i = 0 ;i \u0026lt; a;i++){ cout \u0026lt;\u0026lt; \u0026#34;Ho\u0026#34;; } } 链接 # 百度官方网站 百度\nhttps://www.baidu.com\n这个链接 good\n图片 # 表格 # title1 title2 title3 one things two things three things first second third 键盘块 # shift and del = S Latex # $$ \\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \\mathbf{i} \u0026amp; \\mathbf{j} \u0026amp; \\mathbf{k} \\ \\frac{\\partial X}{\\partial u} \u0026amp; \\frac{\\partial Y}{\\partial u} \u0026amp; 0 \\ \\frac{\\partial X}{\\partial v} \u0026amp; \\frac{\\partial Y}{\\partial v} \u0026amp; 0 \\ \\end{vmatrix} {$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}} $$\nMermaid # 横向流程图 # graph LR A[方形] --\u0026gt;B(圆角) B --\u0026gt; C{条件a} C --\u0026gt;|a=1| D[结果1] C --\u0026gt;|a=2| E[结果2] F[横向流程图] 纵向流程图 # graph TD A[方形] --\u0026gt; B(圆角) B --\u0026gt; C{条件a} C --\u0026gt; |a=1| D[结果1] C --\u0026gt; |a=2| E[结果2] F[竖向流程图] UML时序图 # 对象A-\u0026gt;对象B: 对象B你好吗?（请求） Note right of 对象B: 对象B的描述 Note left of 对象A: 对象A的描述(提示) 对象B--\u0026gt;对象A: 我很好(响应) 对象A-\u0026gt;对象B: 你真的好吗？ 脚注尾部 # A game company\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2024-04-03","externalUrl":null,"permalink":"/posts/first/","section":"Posts","summary":"","title":"Markdown语法兼容性测试","type":"posts"},{"content":"","date":"0001-01-01","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","date":"0001-01-01","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"0001-01-01","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"0001-01-01","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"}]